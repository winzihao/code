//友元函数可以直接访问类的私有成员，它是定义在类外部的普通函数，不属于任何类，
//但需要在类的内部声明，声明时需要加friend关键字。
class Date
{
	friend ostream& operator<<(ostream& _cout, const Date& d);
	friend istream& operator>>(istream& _cin, const Date& d);
public:
	Date(int year, int month, int day)
		: _year(year)
		, _month(month)
		, _day(day)
	{}
private:
	int _year;
	int _month;
	int _day
};

ostream& operator<<(ostream& _cout, const Date& d) {
	_cout << d._year << "-" << d._month << "-" << d._day;
	return _cout;
}
istream& operator>>(istream& _cin, const Date& d) {
	_cin >> d._year;
	_cin >> d._month;
	_cin >> d._day;
	return _cin;
}

int main()
{
	Date d;
	cin >> d;
	cout << d << endl;
	system("pause");
	return 0;
}

//友元类的所有成员函数都可以是另一个类的友元函数，都可以访问另一个类中的非公有成员。
//友元关系是单向的，不具有交换性。
//
//比如上述Time类和Date类，在Time类中声明Date类为其友元类，那么可以在Date类中直接访问Time
//类的私有成员变量，但想在Time类中访问Date类中私有的成员变量则不行。
//
//友元关系不能传递
//如果B是A的友元，C是B的友元，则不能说明C时A的友元。
class Date; // 前置声明
class Time
{
	friend class Date; 
	// 声明日期类为时间类的友元类，则在日期类中就直接访问Time类中的私有成员变量
public:
	Time(int hour, int minute, int second)
		: _hour(hour)
		, _minute(minute)
		, _second(second)
	{}
private:
	int _hour;
	int _minute;
	int _second;
};

class Date
{
public:
	Date(int year = 1900, int month = 1, int day = 1)
		: _year(year)
		, _month(month)
		, _day(day)
	{}
	void SetTimeOfDate(int hour, int minute, int second)
	{
		// 直接访问时间类私有的成员变量
		_t._hour = hour;
		_t._minute = minute;
		_t._second = second;
	}
private:
	int _year;
	int _month;
	int _day;
	Time _t;
}; 

//如果一个类定义在另一个类的内部，这个内部类就叫做内部类
//1. 内部类可以定义在外部类的public、protected、private都是可以的。
//2. 注意内部类可以直接访问外部类中的static、枚举成员，不需要外部类的对象 / 类名。
//3. sizeof(外部类) = 外部类，和内部类没有任何关系。
class A {
private:
	static int k;
	int h;
public:
	class B
	{
	public:
		void foo(const A& a)
		{
			cout << k << endl;//OK
			cout << a.h << endl;//OK
		}
	};
};

int A::k = 1;

int main()
{
	A::B b;
	b.foo(A());
	return 0;
}
