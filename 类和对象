#include<stdio.h>
#include<iostream>
using namespace std;

#if 0 
Date(int year, int month, int day) {
	_year = year;
	_month = month;
	_day = day;
}
//初始化列表
Date(int year, int month, int day)
	: _year(year)
	, _month(month)
	, _day(day)
{}

	Date(const Date& d) {
		_year = d._year;
		_month = d._month;
		_day = d._day;

		Date(const Date& d) 
			: _year(year)
			, _month(month)
			, _day(day)
		{}
#endif

#if 0 
class Date {
public:
	//初始化列表进行初始化
	Date(int year, int month, int day)
		: _year(year)
		, _month(month)
		, _day(day)
		, _a(year)
		, _c(year)
	{}

private:
	int _year;
	int _month;
	int _day;
	int& _a;
	const int _c;
};

int main() {
	Date d(2019, 8，7);
	
	system("pause");
	return 0;
}
#endif
#if 0 
class Date {
public:
	//初始化列表进行初始化
	//_month是一个随机值
	//成员变量在构造函数初始化规则：按照成员变量在类中声明的先后次序来进行初始化，而不是按照其在初始化列表中出现的先后次序初始化
	//建议：初始化顺序最好声明顺序来进行初始化
	Date(int year, int month)
		: _year(year)
		, _day(month)
		, _month(_day)
	{}

private:
	int _year;
	int _day;
	int _month;
};

int main() {
	Date d(2019, 8);

	system("pause");
	return 0;
}
#endif

#if 0
class Date {
public:
	//初始化列表进行初始化
	Date(int year)
		: _year(year)
		, _month(8)
		, _day(7)
	{
		cout << "Date(int)" << endl;
	}

private:
	int _year;
	int _month;
	int _day;
};

Date& operator = (const Date& d) {
	cout << this << "=" << &d << endl;
	if (this != &d) {
		_year = d._year;
		_month = d._month;
		_day = d._day;
	}
	return *this;
}

~Date() {
	cout << "date(int):" << this << endl;
}

int main() {
	Date d(2019);
	
	system("pause");
	return 0;
}
#endif

#if 0
class Time
{
public:
	Time(int hour = 0)
		:_hour(hour)
	{
		cout << "Time()" << endl;
	}
private:
	int _hour;
};
class Date
{
public:
	Date(int day)
	{}
private:
	int _day;
	Time _t;
};
int main()
{
	Date d(1);
	system("pause");
	return 0;
}
#endif
//单参构造：构造函数具有类型转化作用
//构造函数不仅可以构造与初始化对象，对于单个参数的构造函数，还具有类型转换的作用。
//用explicit修饰构造函数，将会禁止单参构造函数的隐式转换。
#if 0
class Date
{
public:
	Date(int year)
		:_year(year)
	{}
	
		explicit Date(int year)
		:_year(year)
	{}
private:
	int _year;
	int _month :
	int _day;
}；
void TestDate()
{
	Date d1(2018);
	// 用一个整形变量给日期类型对象赋值
	// 实际编译器背后会用2019构造一个无名对象，最后用无名对象给d1对象进行赋值
	d1 = 2019;
}
#endif

//static成员
//静态的成员变量:一定要在类外进行初始化
//静态成员变量在类中声明时必须添加static，必须在类外定义，定义时不添加static关键字.
//类静态成员即可用类名::静态成员或者对象.静态成员来访问
//静态成员函数：只能直接访问静态成员变量，没有隐藏的this指针，不能访问任何非静态成员
//this->_t = 10;
//静态成员函数不能使用const修饰，因为没有this
//static int GetACount()const  错误
#if 0
class A {
public: A() { ++_count; }
		A(const A& t) { ++_count; }
		static int GetACount() { return _count; }
private:
	//静态成员变量在类中声明时必须添加static
	static int _count;
};
//静态的成员变量:一定要在类外进行初始化,必须在类外定义，定义时不添加static关键字
int A::_count = 0;

void TestA()
{
	cout << A::GetACount() << endl; A a1, a2; A a3(a1);
	cout << A::G，etACount() << endl;
}
#endif
#if 0
//友元函数可以直接访问类的私有成员，它是定义在类外部的普通函数，不属于任何类，
//但需要在类的内部声明，声明时需要加friend关键字。
class Date
{
	friend ostream& operator<<(ostream& _cout, const Date& d);
	friend istream& operator>>(istream& _cin, const Date& d);
public:
	Date(int year, int month, int day)
		: _year(year)
		, _month(month)
		, _day(day)
	{}
private:
	int _year;
	int _month;
	int _day
};

ostream& operator<<(ostream& _cout, const Date& d) {
	_cout << d._year << "-" << d._month << "-" << d._day;
	return _cout;
}
istream& operator>>(istream& _cin, const Date& d) {
	_cin >> d._year;
	_cin >> d._month;
	_cin >> d._day;
	return _cin;
}

int main()
{
	Date d;
	cin >> d;
	cout << d << endl;
	system("pause");
	return 0;
}
#endif

//友元类的所有成员函数都可以是另一个类的友元函数，都可以访问另一个类中的非公有成员。
//友元关系是单向的，不具有交换性。
//
//比如上述Time类和Date类，在Time类中声明Date类为其友元类，那么可以在Date类中直接访问Time
//类的私有成员变量，但想在Time类中访问Date类中私有的成员变量则不行。
//
//友元关系不能传递
//如果B是A的友元，C是B的友元，则不能说明C时A的友元。
class Date; // 前置声明
class Time
{
	friend class Date; 
	// 声明日期类为时间类的友元类，则在日期类中就直接访问Time类中的私有成员变量
public:
	Time(int hour, int minute, int second)
		: _hour(hour)
		, _minute(minute)
		, _second(second)
	{}
private:
	int _hour;
	int _minute;
	int _second;
};

class Date
{
public:
	Date(int year = 1900, int month = 1, int day = 1)
		: _year(year)
		, _month(month)
		, _day(day)
	{}
	void SetTimeOfDate(int hour, int minute, int second)
	{
		// 直接访问时间类私有的成员变量
		_t._hour = hour;
		_t._minute = minute;
		_t._second = second;
	}
private:
	int _year;
	int _month;
	int _day;
	Time _t;
}; 

//如果一个类定义在另一个类的内部，这个内部类就叫做内部类
//1. 内部类可以定义在外部类的public、protected、private都是可以的。
//2. 注意内部类可以直接访问外部类中的static、枚举成员，不需要外部类的对象 / 类名。
//3. sizeof(外部类) = 外部类，和内部类没有任何关系。
class A {
private:
	static int k;
	int h;
public:
	class B
	{
	public:
		void foo(const A& a)
		{
			cout << k << endl;//OK
			cout << a.h << endl;//OK
		}
	};
};

int A::k = 1;

int main()
{
	A::B b;
	b.foo(A());
	return 0;
}
